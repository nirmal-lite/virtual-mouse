import cv2
import numpy as np
import hands as htm
import time
import autopy
import pyautogui
pyautogui.FAILSAFE = False
def main():
    ##########################
    wCam, hCam = 640, 480
    frameR = 210 # Frame Reduction
    smoothening = 7
    slp=.5
    #########################

    pTime = 0
    plocX, plocY = 0, 0
    clocX, clocY = 0, 0

    cap = cv2.VideoCapture(0)
    cap.set(3, wCam)
    cap.set(4, hCam)
    detector = htm.handDetector(maxHands=1)
    wScr, hScr = autopy.screen.size()
    px=0
    py=0
    # print(wScr, hScr)
    
    while True:
        # 1. Find hand Landmarks
        success, img = cap.read()
        img = detector.findHands(img)
        img= cv2.flip(img,1)
        
        lmList, bbox = detector.findPosition(img)
        # 2. Get the tip of the index and middle fingers
        if len(lmList) != 0:
            x1, y1 = lmList[8][1:]
            x2, y2 = lmList[12][1:]
            # print(x1, y1, x2, y2)
        
        # 3. Check which fingers are up
        fingers = detector.fingersUp()
        print(fingers)
        cv2.rectangle(img, (frameR, frameR), (wCam - frameR, hCam - frameR),
        (255, 0, 255), 2)
        # 4. Only Index Finger : Moving Mode
        if len(fingers)>4 :
            if fingers[1]==1 and fingers[2]==1 and fingers[4]==1:

                if(py>y1):
                    if fingers[3]==0:
                        pyautogui.hotkey('ctrl','+')

                    elif(x1<px):pyautogui.scroll(200)
                    else: pyautogui.hscroll(500)
                else:
                    if fingers[3]==0:
                        pyautogui.hotkey('ctrl','-')

                    elif(x1<px):pyautogui.scroll(-200)
                    else: pyautogui.hscroll(-500)                     

                px=x1 
                py=y2   

                lenx,img, lineInfox =detector.findDistance(4,16,img)
                if lenx< 40:
                    cv2.circle(img, (img.shape[1]-lineInfox[4], lineInfox[5]),
                    15, (0, 255, 0), cv2.FILLED)
                    pyautogui.hotkey('alt'+'f4')
                    time.sleep(slp)


            
            elif fingers[1] == 1 :
                # 5. Convert Coordinates
                x3 = np.interp(x1, (frameR, wCam - frameR), (0, wScr))
                y3 = np.interp(y1, (frameR, hCam - frameR), (0, hScr))
                # 6. Smoothen Values
                clocX = plocX + (x3 - plocX) / smoothening
                clocY = plocY + (y3 - plocY) / smoothening
            
                # 7. Move Mouse
                try:
                    autopy.mouse.move(wScr-clocX, clocY)
                    cv2.circle(img, (img.shape[1]-x1, y1), 15, (255, 0, 255), cv2.FILLED)
                    plocX, plocY = clocX, clocY
                except:
                    print(wScr-clocX, clocY)
                # 8. Both Index and middle fingers are up : Clicking Mode
            
            
                # 9. Find distance between fingers
                length, img, lineInfo = detector.findDistance(4, 12, img)
                # 10. Click mouse if distance short
                if length < 40:
                    cv2.circle(img, (img.shape[1]-lineInfo[4], lineInfo[5]),
                    15, (0, 255, 0), cv2.FILLED)
                    autopy.mouse.click()
                    time.sleep(slp)
                   


            else: px=img.shape[0]/2 ;py=img.shape[1]/2     

        # 11. Frame Rate
        cTime = time.time()
        fps = 1 / (cTime - pTime)
        pTime = cTime
        cv2.putText(img, str(int(fps)), (20, 50), cv2.FONT_HERSHEY_PLAIN, 3,
        (255, 0, 0), 3)
        # 12. Display
        cv2.imshow("Image", img)
        cv2.waitKey(1)

if __name__=="__main__":
    main()        
